<html>
	<head>
		<link href="/css/style.css" rel="stylesheet" type="text/css">
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Lato&display=swap" rel="stylesheet"> 
	</head>
	<body>
		<div class="radar-wrapper">
			<div class="type-selector">
				<button id="smokes-button" onclick="switchType('smokes')">Smokes</button>
				<button id="molotovs-button"  onclick="switchType('molotovs')">Molotovs</button>
				<button id="flashes-button"  onclick="switchType('flashes')">Flashes</button>
				<button id="grenades-button"  onclick="switchType('grenades')">Grenades</button>
			</div>
			<img id="radar-img" draggable="false">
			<canvas width="1028" height="1028"></canvas>
		</div>
		<div id="smokes"></div>
		<div id="molotovs"></div>
		<div id="flashes"></div>
		<div id="grenades"></div>
	</body>
</html>
<script>
	const LOCATION_HALFSIZE = 10
	const NADE_HALFWIDTH = 25
	const NADE_HALFHEIGHT = 25
	
	let openLocations = null
	const canvas = document.getElementsByTagName("canvas")[0]
	const ctx = canvas.getContext('2d')
	const nades = <%- JSON.stringify(nades) %>;
	document.getElementById('radar-img').src = "resources/<%- radarImg %>"

	nades.smokes.forEach(nade => addNade(nade, "smokes", "SmokeIcon.svg"));
	nades.molotovs.forEach(nade => addNade(nade, "molotovs", "MolotovIcon.svg"));
	nades.flashes.forEach(nade => addNade(nade, "flashes", "FlashIcon.svg"));
	nades.grenades.forEach(nade => addNade(nade, "grenades", "GrenadeIcon.svg"));
	switchType("smokes")

	function addNade(nade, wrapperString, icon) {
		const utilWrapper = document.createElement("div")
		utilWrapper.className = 'util-wrapper'
		utilWrapper.style.left = nade.x + "px"
		utilWrapper.style.top = nade.y + "px"
		if (nade.locations.length === 1) {
			utilWrapper.onclick = () => { window.location.href = nade.locations[0].href}
		} else {
			utilWrapper.addEventListener("click", () => {
				if (!utilWrapper.isOpen) {
					hideLocations(openLocations)
					showLocations(nade, utilWrapper)
					openLocations = utilWrapper
					utilWrapper.isOpen = true
				} else {
					hideLocations(utilWrapper)
				}
			})
		}
		
		const utilLocations = document.createElement("div")
		utilLocations.className = 'util-locations'
		utilLocations.innerHTML = nade.locations.length > 1 ? nade.locations.length : ""
		
		const img = document.createElement("img")
		img.draggable = false
		img.className = "util-image"
		img.src = "resources/" + icon

		nade.locations.forEach(location => {
			const utilLocation = document.createElement("div")
			utilLocation.className = 'util-location'
			utilLocation.style.display = 'none'
			utilLocation.onclick = () => { 
				window.location.href = location.href
			}
			utilWrapper.appendChild(utilLocation)
		})
		
		utilWrapper.appendChild(img)
		utilWrapper.appendChild(utilLocations)
		document.getElementById(wrapperString).appendChild(utilWrapper)
	}

	function switchType(type) {
		hideLocations(openLocations)
		selectButton(type)
		showNades(type)
	}

	function selectButton(type) {
		document.getElementById('molotovs-button').className = ""
		document.getElementById('smokes-button').className = ""
		document.getElementById('flashes-button').className = ""
		document.getElementById('grenades-button').className = ""
		document.getElementById(type + '-button').className = "selected"
	}

	function showNades(type) {
		document.getElementById('smokes').style.display = "none"
		document.getElementById('molotovs').style.display = "none"
		document.getElementById('flashes').style.display = "none"
		document.getElementById('grenades').style.display = "none"
		document.getElementById(type).style.display = "block"
	}

	function showLocations(nade, utilWrapper) {
		const nadeX = nade.x + NADE_HALFWIDTH
		const nadeY = nade.y + NADE_HALFHEIGHT
		let distancePercent = 0
		const utilLocations = utilWrapper.getElementsByClassName('util-location')

		const interval = setInterval(() => {
			clearCanvas()
			for (let i = 0; i < utilLocations.length; i++) {
				const locationX = nade.locations[i].x + LOCATION_HALFSIZE
				const locationY = nade.locations[i].y + LOCATION_HALFSIZE
				const vectorX = locationX - nadeX
				const vectorY = locationY - nadeY
				utilLocations[i].style.left = nadeX + vectorX * distancePercent - LOCATION_HALFSIZE + "px"
				utilLocations[i].style.top = nadeY + vectorY * distancePercent - LOCATION_HALFSIZE+ "px"
				utilLocations[i].style.display = "block"

				ctx.beginPath();
				ctx.strokeStyle = "white";
				ctx.lineWidth = 2;
				ctx.moveTo(nadeX, nadeY);
				ctx.lineTo(nadeX + vectorX * distancePercent, nadeY + vectorY * distancePercent);
				ctx.stroke(); 
			}
			distancePercent += 0.02
			if (distancePercent >= 1) clearInterval(interval)
		}, 1);
	}

	function hideLocations(utilWrapper) {
		if (!utilWrapper) return
		const utilLocations = utilWrapper.getElementsByClassName('util-location')
		clearCanvas()
		for (let i = 0; i < utilLocations.length; i++) {
			utilLocations[i].style.left = 0
			utilLocations[i].style.top = 0
			utilLocations[i].style.display = 'none'
		}
		openLocations = null
		utilWrapper.isOpen = false
	}

	function clearCanvas() {
		canvas.width = canvas.width
	}
</script>